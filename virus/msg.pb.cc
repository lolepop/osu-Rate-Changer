// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#include "msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace messaging {
constexpr Msg::Msg(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : uimsg_(0)

  , dllmsg_(0)

  , doubleval_(0)
  , boolval_(false){}
struct MsgDefaultTypeInternal {
  constexpr MsgDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MsgDefaultTypeInternal() {}
  union {
    Msg _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MsgDefaultTypeInternal _Msg_default_instance_;
}  // namespace messaging
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_msg_2eproto[1];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_msg_2eproto[2];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_msg_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_msg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::messaging::Msg, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::messaging::Msg, uimsg_),
  PROTOBUF_FIELD_OFFSET(::messaging::Msg, dllmsg_),
  PROTOBUF_FIELD_OFFSET(::messaging::Msg, doubleval_),
  PROTOBUF_FIELD_OFFSET(::messaging::Msg, boolval_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::messaging::Msg)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::messaging::_Msg_default_instance_),
};

const char descriptor_table_protodef_msg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tmsg.proto\022\tmessaging\"m\n\003Msg\022\037\n\005uiMsg\030\001"
  " \001(\0162\020.messaging.UiMsg\022!\n\006dllMsg\030\002 \001(\0162\021"
  ".messaging.DllMsg\022\021\n\tdoubleVal\030\003 \001(\001\022\017\n\007"
  "boolVal\030\004 \001(\010*&\n\005UiMsg\022\014\n\010SETSPEED\020\000\022\017\n\013"
  "SETBPMSCALE\020\001*%\n\006DllMsg\022\r\n\tCONNECTED\020\000\022\014"
  "\n\010RESPONSE\020\001b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_msg_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2eproto = {
  false, false, 220, descriptor_table_protodef_msg_2eproto, "msg.proto", 
  &descriptor_table_msg_2eproto_once, nullptr, 0, 1,
  schemas, file_default_instances, TableStruct_msg_2eproto::offsets,
  file_level_metadata_msg_2eproto, file_level_enum_descriptors_msg_2eproto, file_level_service_descriptors_msg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_msg_2eproto_getter() {
  return &descriptor_table_msg_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_msg_2eproto(&descriptor_table_msg_2eproto);
namespace messaging {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* UiMsg_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[0];
}
bool UiMsg_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DllMsg_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[1];
}
bool DllMsg_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class Msg::_Internal {
 public:
};

Msg::Msg(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:messaging.Msg)
}
Msg::Msg(const Msg& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&uimsg_, &from.uimsg_,
    static_cast<size_t>(reinterpret_cast<char*>(&boolval_) -
    reinterpret_cast<char*>(&uimsg_)) + sizeof(boolval_));
  // @@protoc_insertion_point(copy_constructor:messaging.Msg)
}

inline void Msg::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&uimsg_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&boolval_) -
    reinterpret_cast<char*>(&uimsg_)) + sizeof(boolval_));
}

Msg::~Msg() {
  // @@protoc_insertion_point(destructor:messaging.Msg)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Msg::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Msg::ArenaDtor(void* object) {
  Msg* _this = reinterpret_cast< Msg* >(object);
  (void)_this;
}
void Msg::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Msg::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Msg::Clear() {
// @@protoc_insertion_point(message_clear_start:messaging.Msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&uimsg_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&boolval_) -
      reinterpret_cast<char*>(&uimsg_)) + sizeof(boolval_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Msg::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .messaging.UiMsg uiMsg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_uimsg(static_cast<::messaging::UiMsg>(val));
        } else goto handle_unusual;
        continue;
      // .messaging.DllMsg dllMsg = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          ::PROTOBUF_NAMESPACE_ID::uint64 val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_dllmsg(static_cast<::messaging::DllMsg>(val));
        } else goto handle_unusual;
        continue;
      // double doubleVal = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          doubleval_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // bool boolVal = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          boolval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag == 0) || ((tag & 7) == 4)) {
          CHK_(ptr);
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Msg::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:messaging.Msg)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .messaging.UiMsg uiMsg = 1;
  if (this->_internal_uimsg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_uimsg(), target);
  }

  // .messaging.DllMsg dllMsg = 2;
  if (this->_internal_dllmsg() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      2, this->_internal_dllmsg(), target);
  }

  // double doubleVal = 3;
  if (!(this->_internal_doubleval() <= 0 && this->_internal_doubleval() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_doubleval(), target);
  }

  // bool boolVal = 4;
  if (this->_internal_boolval() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(4, this->_internal_boolval(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:messaging.Msg)
  return target;
}

size_t Msg::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:messaging.Msg)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .messaging.UiMsg uiMsg = 1;
  if (this->_internal_uimsg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_uimsg());
  }

  // .messaging.DllMsg dllMsg = 2;
  if (this->_internal_dllmsg() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_dllmsg());
  }

  // double doubleVal = 3;
  if (!(this->_internal_doubleval() <= 0 && this->_internal_doubleval() >= 0)) {
    total_size += 1 + 8;
  }

  // bool boolVal = 4;
  if (this->_internal_boolval() != 0) {
    total_size += 1 + 1;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Msg::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Msg::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Msg::GetClassData() const { return &_class_data_; }

void Msg::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message*to,
                      const ::PROTOBUF_NAMESPACE_ID::Message&from) {
  static_cast<Msg *>(to)->MergeFrom(
      static_cast<const Msg &>(from));
}


void Msg::MergeFrom(const Msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:messaging.Msg)
  GOOGLE_DCHECK_NE(&from, this);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_uimsg() != 0) {
    _internal_set_uimsg(from._internal_uimsg());
  }
  if (from._internal_dllmsg() != 0) {
    _internal_set_dllmsg(from._internal_dllmsg());
  }
  if (!(from._internal_doubleval() <= 0 && from._internal_doubleval() >= 0)) {
    _internal_set_doubleval(from._internal_doubleval());
  }
  if (from._internal_boolval() != 0) {
    _internal_set_boolval(from._internal_boolval());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Msg::CopyFrom(const Msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:messaging.Msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg::IsInitialized() const {
  return true;
}

void Msg::InternalSwap(Msg* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Msg, boolval_)
      + sizeof(Msg::boolval_)
      - PROTOBUF_FIELD_OFFSET(Msg, uimsg_)>(
          reinterpret_cast<char*>(&uimsg_),
          reinterpret_cast<char*>(&other->uimsg_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Msg::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[0]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace messaging
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::messaging::Msg* Arena::CreateMaybeMessage< ::messaging::Msg >(Arena* arena) {
  return Arena::CreateMessageInternal< ::messaging::Msg >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
